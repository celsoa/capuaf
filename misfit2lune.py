#!/usr/bin/python
#
# This script makes a summary of FMP misfit data generated by cap
# when running with only_first_motion=1
# 
# input: out.misfit.fmp_
# gamma   delta   str   dip   rak  N pol misfits
# -30.0   -71.3   0.0  27.3 -90.0   7
# -30.0   -71.3  10.0  27.3 -90.0   7
# -30.0   -71.3  20.0  27.3 -90.0   7
#
# output: out_misfit_fmp_summary
# gamma          delta  n(Lambda)  N orientations   fraction orientations
# -10.0  9.6000000e+00  0.0              10         2.0854188e-04
#  10.0 -2.6400000e+01  2.0             231         4.8173173e-03
#   0.0  7.0800000e+01  4.0           47952         1.0000000e+00
#
#
# usage
#   python get_fmt_misfit_fmp.py out.misfit.fmp_
#
# 20130822 celso alvizuri - cralvizuri@alaska.edu 
#
#-----------------------------------------------------------
# If you use this code for your own research, please cite:
# 
# @article{AlvizuriTape2016,
#      AUTHOR = {C. Alvizuri and C. Tape},
#      TITLE = {{Full moment tensors for small events ($\mw < 3$) at Uturuncu volcano, Bolivia}},
#      JOURNAL = {Geophys.~J.~Int. \rm(in prep.)},
#      PAGES = {},
#      VOLUME = {},
#      NUMBER = {},
#      EID = {},
#      DOI = {},
#      YEAR = {2015}
# }
#
#-----------------------------------------------------------

import sys

if len(sys.argv) < 2:
    sys.exit('Usage: %s out.misfit.fmp_ > outputfile ' % sys.argv[0])

inputfile = str(sys.argv[1])
sys.stderr.write('%s: computing polarity misfit on the lune...\n' % (sys.argv[0]))
sys.stderr.write('%s: input file: %s\n' % (sys.argv[0], inputfile))

# prepare input/output files
outfile1="out_misfit_fmp_summary"
fid1 = open(inputfile,'r')
fid2 = open(outfile1,'w')

#coordinates
c = {}
for line in fid1:
    #items
    i = [float(n) for n in line.split()]

    x, y, misfit = i[0], i[1], i[5]

    if (x, y) not in c:
        c[(x, y)] = [misfit, 1, 1]
    else:   # (x,y) already in c
        c[(x, y)][2] += 1
        if c[(x, y)][0] > misfit:
            # lower misfit found. update
            c[(x, y)][0], c[(x, y)][1] = misfit, 1
        elif c[(x, y)][0] == misfit:
            c[(x, y)][1] += 1

for key in c:
    fid2.write('%5.1f %14.7e %4.1f %6d %14.7e\n' %
        (key[0], key[1], c[key][0], c[key][1],
        float(c[key][1])/float(c[key][2])))

fid1.close()
fid2.close()
sys.stderr.write('%s: done. solutions processed: %d\n' % (sys.argv[0], len(c)))
sys.stderr.write('%s: output: %s\n' % (sys.argv[0], outfile1))

