%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: (atend)
%%Title: GMT v4.0 Document from psxy
%%Creator: GMT
%%For: lupei
%%DocumentNeededResources: font Helvetica
%%CreationDate: Sat Dec 15 22:39:43 2012
%%LanguageLevel: 1
%%DocumentData: Clean7Bit
%%EndComments

%%BeginProlog

% Begin pslib header

250 dict begin
/A /setgray load def
/B /setdash load def
/C /setrgbcolor load def
/D /rlineto load def
/E {dup stringwidth pop} bind def
/F /fill load def
/G /rmoveto load def
/K /setcmykcolor load def
/L /lineto load def 
/M {stroke moveto} bind def
/m {moveto} bind def
/N /newpath load def
/P /closepath load def
/R /rotate load def
/S /stroke load def
/T /translate load def
/U /grestore load def
/V /gsave load def
/W /setlinewidth load def
/X {M dup 0 D dup -0.5 mul dup G 0 exch D S} bind def
/Y {findfont exch scalefont setfont} bind def
/Z /show load def
/a0 {0 0 M D D 0 D D D D D 0 D D P V A F U N} bind def
/a1 {0 0 M D D 0 D D D D D 0 D D P V A F U S} bind def
/a2 {0 0 M D D 0 D D D D D 0 D D P V C F U N} bind def
/a3 {0 0 M D D 0 D D D D D 0 D D P V C F U S} bind def
/a4 {0 0 M D D 0 D D D D D 0 D D P S} bind def
/a5 {0 0 M D D 0 D D D D D 0 D D P V K F U N} bind def
/a6 {0 0 M D D 0 D D D D D 0 D D P V K F U S} bind def
/A0 {0 exch M 0 D D D D D 0 D P V A F U N} bind def
/A1 {0 exch M 0 D D D D D 0 D P V A F U S} bind def
/A2 {0 exch M 0 D D D D D 0 D P V C F U N} bind def
/A3 {0 exch M 0 D D D D D 0 D P V C F U S} bind def
/A4 {0 exch M 0 D D D D D 0 D P S} bind def
/A5 {0 exch M 0 D D D D D 0 D P V K F U N} bind def
/A6 {0 exch M 0 D D D D D 0 D P V K F U S} bind def
/C0 {0 360 arc V A F U N} bind def
/C1 {0 360 arc V A F U S} bind def
/C2 {0 360 arc V C F U N} bind def
/C3 {0 360 arc V C F U S} bind def
/C4 {0 360 arc S} bind def
/C5 {0 360 arc V K F U N} bind def
/C6 {0 360 arc V K F U S} bind def
/D0 {M 5 {dup} repeat D neg exch D neg exch neg D P V A F U N} bind def
/D1 {M 5 {dup} repeat D neg exch D neg exch neg D P V A F U S} bind def
/D2 {M 5 {dup} repeat D neg exch D neg exch neg D P V C F U N} bind def
/D3 {M 5 {dup} repeat D neg exch D neg exch neg D P V C F U S} bind def
/D4 {M 5 {dup} repeat D neg exch D neg exch neg D P S} bind def
/D5 {M 5 {dup} repeat D neg exch D neg exch neg D P V K F U N} bind def
/D6 {M 5 {dup} repeat D neg exch D neg exch neg D P V K F U S} bind def
/R0 {M dup 0 D exch 0 exch D neg 0 D P V A F U N} bind def
/R1 {M dup 0 D exch 0 exch D neg 0 D P V A F U S} bind def
/R2 {M dup 0 D exch 0 exch D neg 0 D P V C F U N} bind def
/R3 {M dup 0 D exch 0 exch D neg 0 D P V C F U S} bind def
/R4 {M dup 0 D exch 0 exch D neg 0 D P S} bind def
/R5 {M dup 0 D exch 0 exch D neg 0 D P V K F U N} bind def
/R6 {M dup 0 D exch 0 exch D neg 0 D P V K F U S} bind def
/S0 {M dup dup 0 D 0 exch D neg 0 D P V A F U N} bind def
/S1 {M dup dup 0 D 0 exch D neg 0 D P V A F U S} bind def
/S2 {M dup dup 0 D 0 exch D neg 0 D P V C F U N} bind def
/S3 {M dup dup 0 D 0 exch D neg 0 D P V C F U S} bind def
/S4 {M dup dup 0 D 0 exch D neg 0 D P S} bind def
/S5 {M dup dup 0 D 0 exch D neg 0 D P V K F U N} bind def
/S6 {M dup dup 0 D 0 exch D neg 0 D P V K F U S} bind def
/T0 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P V A F U N} bind def
/T1 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P V A F U S} bind def
/T2 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P V C F U N} bind def
/T3 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P V C F U S} bind def
/T4 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P S} bind def
/T5 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P V K F U N} bind def
/T6 {M dup 0 D dup -0.5 mul exch 0.866025 mul D P V K F U S} bind def
/I0 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P V A F U N} bind def
/I1 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P V A F U S} bind def
/I2 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P V C F U N} bind def
/I3 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P V C F U S} bind def
/I4 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P S} bind def
/I5 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P V K F U N} bind def
/I6 {M dup 0 D dup -0.5 mul exch -0.866025 mul D P V K F U S} bind def
/E0 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P V A F U N U} bind def
/E1 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P V A F U S U} bind def
/E2 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P V C F U N U} bind def
/E3 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P V C F U S U} bind def
/E4 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P S U} bind def
/E5 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P V K F U N U} bind def
/E6 {V T dup 0 exch M 0.726542528 mul -72 R dup 0 D 4 {72 R dup 0 D -144 R dup 0 D} repeat pop P V K F U S U} bind def
/H0 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P V A F U N U} bind def
/H1 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P V A F U S U} bind def
/H2 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P V C F U N U} bind def
/H3 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P V C F U S U} bind def
/H4 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P S U} bind def
/H5 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P V K F U N U} bind def
/H6 {V T dup dup 0.5 mul exch 0.866025404 mul M 5 {-60 R dup 0 D} repeat pop P V K F U S U} bind def
/N0 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P V A F U N U} bind def
/N1 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P V A F U S U} bind def
/N2 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P V C F U N U} bind def
/N3 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P V C F U S U} bind def
/N4 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P S U} bind def
/N5 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P V K F U N U} bind def
/H6 {V T dup 1.175570504 mul exch dup 0.587785252 mul exch -0.809016994 mul M 4 {72 R dup 0 D} repeat pop P V K F U S U} bind def
/O0 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P V A F U N U} bind def
/O1 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P V A F U S U} bind def
/O2 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P V C F U N U} bind def
/O3 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P V C F U S U} bind def
/O4 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P S U} bind def
/O5 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P V K F U N U} bind def
/O6 {V T dup dup 0.414213562 mul exch M 0.828427125 mul 7 {-45 R dup 0 D} repeat pop P V K F U S U} bind def
/P0 {arc P V A F U N} bind def
/P1 {arc P V A F U S} bind def
/P2 {arc P V C F U N} bind def
/P3 {arc P V C F U S} bind def
/P4 {arc P S} bind def
/P5 {arc P V K F U N} bind def
/P6 {arc P V K F U S} bind def
/a {P V A F U N} def
/b {P V A F U S} def
/c {P V C F U N} def
/d {P V C F U S} def
/k {P V K F U N} def
/l {P V K F U S} def
/p {P S} def
/q {M {D} repeat P V A F U N} def
/r {M {D} repeat P V A F U S} def
/s {M {D} repeat P V C F U N} def
/t {M {D} repeat P V C F U S} def
/u {M {D} repeat P V K F U N} def
/v {M {D} repeat P V K F U S} def
/w {M {D} repeat P S} def
/PSL_get_stringwidth {0 0 M true charpath flattenpath pathbbox N pop exch pop sub abs} def
/PSL_get_stringheight {0 0 M true charpath flattenpath pathbbox N exch pop sub abs exch pop} def

%%EndProlog
/Standard+_Encoding [
/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef
/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef
/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef	/.notdef
/.notdef	/threequarters	/threesuperior	/trademark	/twosuperior	/yacute		/ydieresis	/zcaron
/space		/exclam		/quotedbl	/numbersign	/dollar		/percent	/ampersand	/quoteright
/parenleft	/parenright	/asterisk	/plus		/comma		/hyphen		/period		/slash
/zero		/one		/two		/three		/four		/five		/six		/seven
/eight		/nine		/colon		/semicolon	/less		/equal		/greater	/question
/at		/A		/B		/C		/D		/E		/F		/G
/H		/I		/J		/K		/L		/M		/N		/O
/P		/Q		/R		/S		/T		/U		/V		/W
/X		/Y		/Z		/bracketleft	/backslash	/bracketright	/asciicircum	/underscore
/quoteleft	/a		/b		/c		/d		/e		/f		/g
/h		/i		/j		/k		/l		/m		/n		/o
/p		/q		/r		/s		/t		/u		/v		/w
/x		/y		/z		/braceleft	/bar		/braceright	/asciitilde	/florin
/Atilde		/Ccedilla	/Eth		/Lslash		/Ntilde		/Otilde		/Scaron		/Thorn
/Yacute		/Ydieresis	/Zcaron		/atilde		/brokenbar	/ccedilla	/copyright	/degree
/divide		/eth		/logicalnot	/lslash		/minus		/mu		/multiply	/ntilde
/onehalf	/onequarter	/onesuperior	/otilde		/plusminus	/registered	/scaron		/thorn
/.notdef	/exclamdown	/cent		/sterling	/fraction	/yen		/florin		/section
/currency	/quotesingle	/quotedblleft	/guillemotleft	/guilsinglleft	/guilsinglright	/fi		/fl
/Aacute		/endash		/dagger		/daggerdbl	/periodcentered	/Acircumflex	/paragraph	/bullet
/quotesinglbase	/quotedblbase	/quotedblright	/guillemotright	/ellipsis	/perthousand	/Adieresis	/questiondown
/Agrave		/grave		/acute		/circumflex	/tilde		/macron		/breve		/dotaccent
/dieresis	/Eacute		/ring		/cedilla	/Ecircumflex	/hungarumlaut	/ogonek		/caron
/emdash		/Edieresis	/Egrave		/Iacute		/Icircumflex	/Idieresis	/Igrave		/Oacute
/Ocircumflex	/Odieresis	/Ograve		/Uacute		/Ucircumflex	/Udieresis	/Ugrave		/aacute
/acircumflex	/AE		/adieresis	/ordfeminine	/agrave		/eacute		/ecircumflex	/edieresis
/egrave		/Oslash		/OE		/ordmasculine	/iacute		/icircumflex	/idieresis	/igrave
/oacute		/ae		/ocircumflex	/odieresis	/ograve		/dotlessi	/uacute		/ucircumflex
/udieresis	/oslash		/oe		/germandbls	/ugrave		/Aring		/aring		/ydieresis
] def
/PSL_reencode {	% To reencode one font with the provided encoding vector
	findfont dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	exch /Encoding exch def currentdict end definefont pop
} bind def
/PSL_font_encode 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 35 array astore def	% Initially zero
/F0 {/Helvetica Y} bind def
/F1 {/Helvetica-Bold Y} bind def
/F2 {/Helvetica-Oblique Y} bind def
/F3 {/Helvetica-BoldOblique Y} bind def
/F4 {/Times-Roman Y} bind def
/F5 {/Times-Bold Y} bind def
/F6 {/Times-Italic Y} bind def
/F7 {/Times-BoldItalic Y} bind def
/F8 {/Courier Y} bind def
/F9 {/Courier-Bold Y} bind def
/F10 {/Courier-Oblique Y} bind def
/F11 {/Courier-BoldOblique Y} bind def
/F12 {/Symbol Y} bind def
/F13 {/AvantGarde-Book Y} bind def
/F14 {/AvantGarde-BookOblique Y} bind def
/F15 {/AvantGarde-Demi Y} bind def
/F16 {/AvantGarde-DemiOblique Y} bind def
/F17 {/Bookman-Demi Y} bind def
/F18 {/Bookman-DemiItalic Y} bind def
/F19 {/Bookman-Light Y} bind def
/F20 {/Bookman-LightItalic Y} bind def
/F21 {/Helvetica-Narrow Y} bind def
/F22 {/Helvetica-Narrow-Bold Y} bind def
/F23 {/Helvetica-Narrow-Oblique Y} bind def
/F24 {/Helvetica-Narrow-BoldOblique Y} bind def
/F25 {/NewCenturySchlbk-Roman Y} bind def
/F26 {/NewCenturySchlbk-Italic Y} bind def
/F27 {/NewCenturySchlbk-Bold Y} bind def
/F28 {/NewCenturySchlbk-BoldItalic Y} bind def
/F29 {/Palatino-Roman Y} bind def
/F30 {/Palatino-Italic Y} bind def
/F31 {/Palatino-Bold Y} bind def
/F32 {/Palatino-BoldItalic Y} bind def
/F33 {/ZapfChancery-MediumItalic Y} bind def
/F34 {/ZapfDingbats Y} bind def
%-------------------------------------------------------------------------------------------
%	$Id: PSL_label.ps,v 1.9 2004/06/24 02:07:50 pwessel Exp $
%
%	P. Wessel, version 1
%
%	PS routines for handling contour labels and clipping of
%	contour lines going through labels.
%
%	There are two parts.  First is something straight out of
%	the Adobe Cookbook for placing text along a curved line.
%	The second part is the functions that assist in finding
%	out where labels are placed and setting clip paths etc.

% Cookbook Example Program from First Printing, Revised 7 Jan 1985
% Program: Placing Text Along an Arbitrary Path     Number: 17
% Modified for use in GMT's pslib.
%-----------------------------------------------------------------------------
%
/PSL_pathtextdict 26 dict def			% Local storage for the procedure PSL_pathtext.
							   
/PSL_pathtext					% PSL_pathtext'' will place a string
  { PSL_pathtextdict begin			% of text along any path. It takes
    /textheight exch def                        % a string and starting offset
    /just exch def                              % a string and starting offset
    /offset exch def				% a string and starting offset
    /str exch def				% distance from the beginning of
						% the path as its arguments. Note
						% that PSL_pathtext assumes that a
						% path has already been defined
						% and after it places the text
						% along the path, it clears the
						% current path like the ``stroke''
						% and ``fill'' operators; it also
						% assumes that a font has been
						% set. ``pathtext'' begins placing
						% the characters along the current
						% path, starting at the offset
						% distance and continuing until
						% either the path length is
						% exhausted or the entire string
						% has been printed, whichever
						% occurs first. The results will
						% be more effective when a small
						% point size font is used with
						% sharp curves in the path.
								       
    /pathdist 0 def				% Initialize the distance we have
						% travelled along the path.
    /setdist offset def				% Initialize the distance we have
						% covered by setting characters.
    /charcount 0 def				% Initialize the character count.
    /justy just 4 idiv textheight mul 2 div neg def
    gsave
      flattenpath				% Reduce the path to a series of
						% straight line segments. The
						% characters will be placed along
						% the line segments in the
						% ``linetoproc.''
      {movetoproc} {linetoproc}			% The basic strategy is to process
	{curvetoproc} {closepathproc}		% the segments of the path,
	pathforall				% keeping a running total of the
						% distance we have travelled so
						% far (pathdist). We also keep
						% track of the distance taken up
						% by the characters that have been
						% set so far (setdist). When the
						% distance we have travelled along
						% the path is greater than the
						% distance taken up by the set
						% characters, we are ready to set
						% the next character (if there are
						% any left to be set). This
						% process continues until we have
						% exhausted the full length of the
						% path.
    grestore
    newpath					% Clear the current path.
    end
  } def
       
PSL_pathtextdict begin
/movetoproc					% ``movetoproc'' is executed when
  { /newy exch def /newx exch def		% a moveto component has been
						% encountered in the pathforall
						% operation.
    /firstx newx def /firsty newy def		% Remember the ``first point'' in
						% the path so that when we get a
						% ``closepath'' component we can
						% properly handle the text.
    /ovr 0 def
    newx newy transform
    /cpy exch def /cpx exch def			% Explicitly keep track of the
						% current position in device
						% space.
  } def
       
/linetoproc					% ``linetoproc'' is executed when
						% a lineto component has been
						% encountered in the pathforall
						% operation.
  { /oldx newx def /oldy newy def		% Update the old point.
    /newy exch def /newx exch def		% Get the new point.
    /dx newx oldx sub def
    /dy newy oldy sub def
    /dist dx dup mul dy dup mul add sqrt def	% Calculate the distance between
						% the old and the new point.
    dist 0 ne
    {
      /dsx dx dist div ovr mul def		% dsx and dsy are used to update
      /dsy dy dist div ovr mul def		% the current position to be just
						% beyond the width of the previous
						% character.
      oldx dsx add oldy dsy add transform
      /cpy exch def /cpx exch def			% Update the current position.
      /pathdist pathdist dist add def		% Increment the distance we have
						% travelled along the path.
      { setdist pathdist le			% Keep setting characters along
						% this path segment until we have
						% exhausted its length.
	  { charcount str length lt		% As long as there are still
	      {setchar} {exit} ifelse }		% characters left in the string,
						% set them.
	  { /ovr setdist pathdist sub def		% Keep track of how much we have
	    exit }				% overshot the path segment by
	  ifelse					% setting the previous character.
						% This enables us to position the
						% origin of the following
						% characters properly on the path.
      } loop
    } if
  } def
       
/curvetoproc					% ``curvetoproc'' is executed when
  { (ERROR: No curveto's after flattenpath!)	% a curveto component has been
    print					% encountered in the pathforall
  } def						% operation. It prints an error
						% message since there shouldn't be
						% any curveto's in a path after
						% the flattenpath operator has
						% been executed.
							    
/closepathproc					% ``closepathproc'' is executed
  { firstx firsty linetoproc			% when a closepath component has
    firstx firsty movetoproc			% been encountered in the
  } def						% pathforall operation. It
						% simulates the action of the
						% operator ``closepath'' by
						% executing ``linetoproc'' with
						% the coordinates of the most
						% recent ``moveto'' and then
						% executing ``movetoproc'' to the
						% same point.
							 
/setchar					% ``setchar'' sets the next
  { /char str charcount 1 getinterval def	% character in the string along
						% the path and then updates the
						% amount of path we have
						% exhausted.
    /charcount charcount 1 add def		% Increment the character count.
    /charwidth char stringwidth pop def		% Find the width of the character.
    gsave
      cpx cpy itransform translate		% Translate to the current
						% position in user space.
      dy dx atan rotate				% Rotate the x-axis to coincide
						% with the current segment.
      0 justy moveto
      char show
      0 justy neg rmoveto
      currentpoint transform
      /cpy exch def /cpx exch def		% Update the current position
    grestore					% before we restore ourselves to
						% the untransformed state.
    /setdist setdist charwidth add def		% Increment the distance we have
  } def						% covered by setting characters.
end

%%%%%%% LABEL CLIP FUNCTIONS %%%%%%%%%%%%%%

% Two main functions deals with label placement and clipping:
% PSL_curved_text_labels: handles text that must follow curved baseline
% PSL_straight_text_labels: handles text that has straight baseline
%
% Both functions assume that these variables have been predefined (at least once):
%
% PSL_setlinepen Function that sets the line pen attributes (width, texture, color)
% PSL_setboxpen  Function that sets the text box pen attributes (width, texture, color)
% PSL_setboxrgb  Function that sets the opaque text box color
% PSL_settxtrgb	 Function that sets the font rgb
% PSL_str	Array with all the labels
% PSL_m		Number of labels
% PSL_angle	The annotation angle for each label
%
% PSL_curved_text_labels expects those labels to be placed along a single
% line of n points, hence it assumes these are defined:
%
% PSL_n		Number of points in the path
% PSL_x		(x,y) coordinates of the path
% PSL_y
% PSL_node	Array with (x,y) node number of label position
%
% PSL_straight_text_labels do not need lines and hence it only expects
% PSL_txt_x	(x,y) coordinates of the location of the m labels
% PSL_txt_y

% Because PSL_curved_text_labels need the entire line's coordinates we only process one line (which may
% have multiple labels) at the time  Thus, there may be many calls to PSL_curved_text_labels,
% one for each line, and they may build up a pretty complex clip path.
% Subroutines of this function are called PSL_CT_*

/PSL_curved_text_labels
{
  /bits exch def				% 4 on/of bit settings as indicated below
  /PSL_clippath bits 1 and 1 eq def		% false inacative, true creates clippath for labels
  /PSL_placetext bits 2 and 0 eq def		% true to place text, false to just make space
  /PSL_strokeline bits 4 and 4 eq def		% true draws line, false skips
  /PSL_firstcall bits 32 and 32 eq def		% true first time called, false later
  /PSL_lastcall bits 64 and 64 eq def		% true last time called, false before
  /PSL_fillbox bits 128 and 128 eq def		% true to paint box opaque before placing text, false gives transparent box
  /PSL_drawbox bits 256 and 256 eq def		% true to draw box outline before placing text, false gives no outline
  /PSL_n1 PSL_n 1 sub def			% one less is the upper limit in for loops
  /PSL_m1 PSL_m 1 sub def			% same
  /PSL_usebox PSL_fillbox PSL_drawbox or def	% true if we need box outline for fill or stroke or both

  PSL_CT_calcstringwidth	% Calculate the width of each label string
  PSL_CT_calclinedist		% Calculate along-track distances
  PSL_CT_addcutpoints		% Expand path to include the cut points

% Now we have the final xx/yy array and we are ready to simply lay down the lines
% and place the text along the line where there are labels.  We will use the
% new array PSL_xp/yp to store the final points prior to use

  PSL_clippath PSL_firstcall and	% Want clipping and it is the first time called
  {	
    gsave newpath clippath		% Bracket with gsave and start clip path the first time - later we append
  } if
  PSL_setlinepen			% Set line color
  /PSL_nn1 PSL_nn 1 sub def		% End index in for loop
  /n 0 def				% Toggle: o means line, 1 means text
  /k 0 def				% Index of the current text string
  /j 0 def				% Output point number counter
  /PSL_seg 0 def			% Line segment number
  /PSL_xp PSL_nn array def
  /PSL_yp PSL_nn array def
  PSL_xp 0 PSL_xx 0 get put		% Place first point in array
  PSL_yp 0 PSL_yy 0 get put
  1 1 PSL_nn1				% Loop over rest of points
  {
    /i exch def				% Index into PSL_xx/yy arrays
    /node_type PSL_kind i get def	% Check what kind of point the current point is
    /j j 1 add def			% Update point count
    PSL_xp j PSL_xx i get put		% Add this point to the path
    PSL_yp j PSL_yy i get put
    node_type 1 eq			% If this is a cut point we either stroke or place text
    {
      n 0 eq				% n is 0 so this is the strokable segment
      {
        PSL_CT_drawline
      }
      {					% here, n = 1 so this is the segment along which text should be placed
	PSL_CT_reversepath		% Reverse path if needed to place text correctly
        PSL_CT_textline
      } ifelse
      /j 0 def
      PSL_xp j PSL_xx i get put		% Place new first point in array
      PSL_yp j PSL_yy i get put
    } if
  } for
  n 0 eq {PSL_CT_drawline} if	% Finish off the last line segment
  
  PSL_lastcall			% After last call we execute the clip path
  {
    PSL_clippath 
    {
      clip
      /PSL_clip_on true def
    } if
    newpath			% Clean up and return
  } if
} def

/PSL_CT_textline
{
  PSL_placetext			% If we want to place the text
  {  % Place curved text along the path just laid down
    PSL_clippath
    {
      PSL_CT_clippath
    }
    {
      PSL_CT_placelabel
    } ifelse
  } if
  /n 0 def /k k 1 add def PSL_setlinepen			% Set n back to 0, goto next label, and switch to pen color
} def

/PSL_CT_calcstringwidth			% Calculate the width of each label string
{
  /PSL_width PSL_m array def	% Assign space for distance
  0 1 PSL_m1
  {
    /i exch def
    PSL_width i PSL_str i get stringwidth pop put
  } for
} def

/PSL_CT_calclinedist			% Calculate the distance along the line
{
  /PSL_newx PSL_x 0 get def
  /PSL_newy PSL_y 0 get def
  /dist 0.0 def			% Cumulative distance at first point is 0
  /PSL_dist PSL_n array def	% Assign array space for distance
  PSL_dist 0 0.0 put		% Distances start at 0 and the 'th point
  1 1 PSL_n1			% Loop over the remaining points
  {
    /i exch def
    /PSL_oldx PSL_newx def
    /PSL_oldy PSL_newy def
    /PSL_newx PSL_x i get def
    /PSL_newy PSL_y i get def
    /dx PSL_newx PSL_oldx sub def
    /dy PSL_newy PSL_oldy sub def
    /dist dist dx dx mul dy dy mul add sqrt add def
    PSL_dist i dist put
  } for
} def

/PSL_CT_addcutpoints
{
  % Initialize an array with all the original line points plus the set of 2*m
  % points at the transition from line to labelspace at each label
  % At the end of this section, the PSL_xx/yy array will be the array to use.
  
  /k 0 def				% Current cut point
  /PSL_nc PSL_m 2 mul 1 add def		% 2*m points + one last acting as infinity
  /PSL_cuts PSL_nc array def		% The array of distances to each cut
  /PSL_nc1 PSL_nc 1 sub def		% One less to use in for loop limits
  0 1 PSL_m1				% For each of the m labels
  {
    /i exch def						% Index for label distance
    /dist PSL_dist PSL_node i get get def		% Recall the distance to this label center
    /halfwidth PSL_width i get 2 div PSL_gap_x add def	% Set the halfwidth + gap distance
    PSL_cuts k dist halfwidth sub put			% Distance at beginning of label gap
    /k k 1 add def					% Was at start, now go to end distance node
    PSL_cuts k dist halfwidth add put			% Distance at the end of label gap
    /k k 1 add def					% Was at end, move to next
  } for
  PSL_cuts k 100000.0 put				% Last cut has "infinite" distance

  /PSL_nn PSL_n PSL_m 2 mul add def	% The total path will be 2*m points longer
  /PSL_xx PSL_nn array def		% Assign new space for x and y
  /PSL_yy PSL_nn array def
  /PSL_kind PSL_nn array def		% 0 = ordinary point, 1 = added point for label gap
  /j 0 def				% Index for new track array
  /k 0 def				% Index for current cut distance
  /dist 0.0 def				% Current distance along track, starting at zero
  0 1 PSL_n1				% Loop over every original line point
  {
    /i exch def				% Index into current point on original line xy array
    /last_dist dist def			% Update distance to last point (initially zero)
    /dist PSL_dist i get def		% Distance to current point
    k 1 PSL_nc1				% Loop over remaining cuts (starting with all)
    {
      /kk exch def			% Index into current cut distance
      /this_cut PSL_cuts kk get def	% Distance to start of this label gap
      dist this_cut gt			% Oh, oh, we just stepped over a cut point
      {
        /ds dist last_dist sub def	% Change in distance
        /f ds 0.0 eq {0.0} {dist this_cut sub ds div} ifelse def	% Get fractional change in distance
	/i1 i 0 eq { 0 } { i 1 sub } ifelse def
        PSL_xx j PSL_x i get dup PSL_x i1 get sub f mul sub put	% Calc (x,y) at label start (or stop) point
        PSL_yy j PSL_y i get dup PSL_y i1 get sub f mul sub put
        PSL_kind j 1 put		% Set PSL_kind to 1 since it is an added cut point
        /j j 1 add def			% Go to next output point
        /k k 1 add def			% Done with this cut point
      } if
    } for
    dist PSL_cuts k get le		% Having dealt with the cut, we may add the regular point
    {
      PSL_xx j PSL_x i get put
      PSL_yy j PSL_y i get put
      PSL_kind j 0 put			% Ordinary (original) coordinates
      /j j 1 add def			% Go to next output point
    } if
  } for
} def

/PSL_CT_reversepath
{
  PSL_xp j get PSL_xp 0 get lt	% Path must first be reversed to avoid upside-down text
  {
    0 1 j 2 idiv		% Loop over half the path and swap left/right points
    {
      /left exch def		% Current left point
      /right j left sub def	% Matching right point
      /tmp PSL_xp left get def	% Swap left and right values for x then y
      PSL_xp left PSL_xp right get put
      PSL_xp right tmp put
      /tmp PSL_yp left get def
      PSL_yp left PSL_yp right get put
      PSL_yp right tmp put
    } for
  } if
  % Now PSL_xp/yp has the correct order to give proper text angles
} def

/PSL_CT_placelabel
{ % Places the curved text label on current segment
  PSL_usebox		% Want to lay down box outline or fill
  {
    PSL_CT_clippath	% Box path now current path
    PSL_fillbox		% Want to paint box
    {
      gsave PSL_setboxrgb fill grestore
    } if
    PSL_drawbox		% Want to draw outline of box
    {
      PSL_setboxpen stroke
    } if
    newpath
  } if
  PSL_settxtrgb PSL_CT_placeline PSL_str k get PSL_gap_x PSL_just PSL_height PSL_pathtext
} def

/PSL_CT_clippath
{ % Lays down a curved clipbox for one label
  /H PSL_height 2 div PSL_gap_y add def
  /xoff j 1 add array def
  /yoff j 1 add array def
  /angle 0 def	% So it is at least a defined variable
  0 1 j {	% Loop over points along line to calculate angle and offsets
    /ii exch def	% Index
    /x PSL_xp ii get def
    /y PSL_yp ii get def
    ii 0 eq {	% Are we at the first point and hence must calculate angle using 0 and 1?
      /x1 PSL_xp 1 get def
      /y1 PSL_yp 1 get def
      /dx x1 x sub def
      /dy y1 y sub def
    }
    {
      /i1 ii 1 sub def	% Previous point
      /x1 PSL_xp i1 get def
      /y1 PSL_yp i1 get def
      /dx x x1 sub def
      /dy y y1 sub def
    } ifelse
    dx 0.0 ne dy 0.0 ne and
    {	% Only calculate new angle if not duplicates
      /angle dy dx atan 90 add def
    } if
    /sina angle sin def
    /cosa angle cos def
    xoff ii H cosa mul put
    yoff ii H sina mul put
  } for
  
  % Lay down next clip segment

  PSL_xp 0 get xoff 0 get add PSL_yp 0 get yoff 0 get add moveto
  1 1 j {	% Loop over the rest of the upper line
    /ii exch def
    PSL_xp ii get xoff ii get add PSL_yp ii get yoff ii get add lineto
  } for
  j -1 0 {	% Loop backwards over the rest of the lower line
    /ii exch def
    PSL_xp ii get xoff ii get sub PSL_yp ii get yoff ii get sub lineto
  } for
  closepath
} def

/PSL_CT_drawline
{
  /str 20 string def
  % PSL_strokeline PSL_seg 0 eq and			% If we asked to draw lines...
  PSL_strokeline 			% If we asked to draw lines...
  {
    PSL_CT_placeline PSL_setlinepen stroke			% Lay down the rest of the path and stroke it
  } if
  /PSL_seg PSL_seg 1 add def				% Goto next segment number
  /n 1 def						% Set n to 1
} def

/PSL_CT_placeline
{
  PSL_xp 0 get PSL_yp 0 get moveto				% Set the anchor point of the path
  1 1 j { /ii exch def PSL_xp ii get PSL_yp ii get lineto} for	% Lay down the rest of the path
} def

% PSL_straight_text_labels deals with straight text labels w/wo textboxes (rect or rounded).
% Because only the (x,y) location of each label is needed we can do all the labels
% in one (or two, for clipping) call to PSL_straight_text_labels.
% Subroutines of this function are alled PSL_ST_*

/PSL_straight_text_labels
{		% This will create a total clip path for all the labels in PSL_txt
  /bits exch def				% Single bitflag argument passed
  /PSL_clippath bits 1 and 0 eq def		% true if we want to clip, false to place text
  /PSL_rounded bits 16 and 16 eq def		% true for rounded box shape, false gives rectangular box
  /PSL_fillbox bits 128 and 128 eq def		% true to paint box opaque before placing text, false gives transparent box
  /PSL_drawbox bits 256 and 256 eq def		% true to draw box outline before placing text, false gives no outline
  /PSL_m1 PSL_m 1 sub def
  /PSL_justx PSL_just 4 mod 1 sub -0.5 mul def
  /PSL_justy PSL_just 4 idiv PSL_height mul 2 div neg def
  /PSL_usebox PSL_fillbox PSL_drawbox or def	% true if we need box outline for fill or stroke or both
  
  PSL_clippath
  {
    PSL_ST_clippath
  }
  {
    PSL_usebox { PSL_ST_clippath } if
    PSL_ST_placelabel
  } ifelse
} def

/PSL_ST_placelabel
{	% Just place labels
  PSL_settxtrgb
  0 1 PSL_m1				% Loop over all labels
  {
    /k exch def						% Current label index
    /xp PSL_txt_x k get def
    /yp PSL_txt_y k get def				% Get text placement point
    gsave PSL_txt_x k get PSL_txt_y k get translate	% Set origin at text point
    PSL_angle k get rotate				% Rotate the coordinate system to follow baseline text
    /BoxW PSL_str k get stringwidth pop def		% Width of current label space including clearance
    BoxW PSL_justx mul PSL_justy moveto			% Goto LL point on label
    PSL_str k get show					% Place the text
    grestore						% Undo damage to coordinate system
  } for
} def

/PSL_ST_clippath
{	% Create and lay down clip path
  PSL_rounded { PSL_ST_clippath_round } { PSL_ST_clippath_rect } ifelse
  PSL_usebox
  {
    PSL_fillbox
    {
      gsave PSL_setboxrgb fill grestore
    } if
    PSL_drawbox
    {
      PSL_setboxpen stroke
    } if
    newpath
  }
  {
    clip				% Set the new clip path
    /PSL_clip_on true def
  } ifelse
  newpath			% Clean up and return
} def

/PSL_ST_clippath_rect
{	% Create and lay down clip path
  newpath				% Start fresh
  /BoxH PSL_height PSL_gap_y 2 mul add def		% Height of current label space including clearance
  /DelY BoxH BoxH 0 3 array astore def			% Offsets in y from LL
  PSL_usebox not { gsave clippath } if	% Set gsave and start clip path
  0 1 PSL_m1				% Loop over all labels
  {
    /k exch def						% Current label index
    /xp PSL_txt_x k get def
    /yp PSL_txt_y k get def					% Get text placement point
    /MAT PSL_angle k get matrix rotate def			% Rotate the coordinate system to follow baseline text
    /BoxW PSL_str k get stringwidth pop PSL_gap_x 2 mul add def	% Width of current label space including clearance
    /x0 0 BoxW PSL_justx mul add def				% (x0,y0) is the rotated and adjusted text LL point relative to xp,yp
    /y0 0 PSL_justy add PSL_gap_y sub def
    /DelX 0 BoxW BoxW 3 array astore def			% Offsets in x from LL
    x0 y0 MAT transform
    /dy exch def /dx exch def
    xp dx add yp dy add moveto			% Start new clippath segment
    0 1 2
    { % Visit all 5 points and append to clippath
      /ii exch def
      x0 DelX ii get add y0 DelY ii get add MAT transform
      /dy exch def /dx exch def
      xp dx add yp dy add lineto			% Start new clippath segment
    } for
    closepath
  } for
} def

/PSL_ST_clippath_round
{	% Create and lay down rounded rectangular clip path
  newpath				% Start fresh
  /PSL_justy2 PSL_just 4 idiv 2 div neg def
  /PSL_r PSL_gap_x PSL_gap_y lt { PSL_gap_x } { PSL_gap_y } ifelse def	% Smallest gap distance
  /PSL_dx PSL_gap_x PSL_r sub def
  /PSL_dy PSL_gap_y PSL_r sub def
  /PSL_r2 PSL_r 2 mul def 
  /BoxH PSL_height PSL_dy 2 mul add def		% Height of inside rectangle
  /y0 PSL_height PSL_gap_y 2 mul add PSL_justy2 mul def
  PSL_usebox not { gsave clippath } if		% Set gsave and start clip path
  0 1 PSL_m1					% Loop over all labels
  {
    /k exch def						% Current label index
    /xp PSL_txt_x k get def
    /yp PSL_txt_y k get def				% Get text placement point
    /PSL_width PSL_str k get stringwidth pop def	% Width of current label only
    /BoxW PSL_width PSL_dx 2 mul add def		% Lenght of inside rectangle
    /x0 BoxW PSL_justx mul def				% (x0,y0) is the rotated and adjusted text LL point on inside rectangle relative to xp,yp
    xp yp T PSL_angle k get R x0 y0 T			% Rotate the coordinate system to follow baseline text
    0 0 moveto
    BoxW PSL_r add 0 BoxW PSL_r add PSL_r PSL_r arct
    BoxW PSL_r add BoxH PSL_r2 add BoxW BoxH PSL_r2 add PSL_r arct
    PSL_r neg BoxH PSL_r2 add PSL_r neg BoxH PSL_r add PSL_r arct
    PSL_r neg 0 0 0 PSL_r arct closepath
    x0 neg y0 neg T PSL_angle k get neg R xp neg yp neg T	% Unto trans/rots
  } for
} def

/PSL_clip_on false def
%%EndProlog

%%BeginSetup

/PSLevel /languagelevel where {pop languagelevel} {1} ifelse def
% Init coordinate system and scales
% Scale is originally set to 0.24, which means that
% 1 inch on the paper equals 300 Postscript units
0.24 0.24 scale
% End of pslib header
%%EndSetup

PSL_font_encode 0 get 0 eq { % Set this font
	Standard+_Encoding /Helvetica /Helvetica PSL_reencode
	PSL_font_encode 0 1 put
} if
300 300 T
%
% PostScript produced by:
%
%%GMT:  psxy -JX3/1.8 -R0/35/-10/100 -K -Ba50f5/a20f5WSne 

S 1 W
S [] 0 B
S 0 A
226 540 M
0 -5 D
5 -32 D
6 -31 D
10 -58 D
5 -28 D
10 -52 D
5 -24 D
6 -23 D
10 -44 D
5 -20 D
10 -36 D
5 -17 D
6 -16 D
10 -28 D
10 -24 D
5 -10 D
5 -9 D
6 -8 D
5 -7 D
5 -6 D
5 -5 D
10 -6 D
5 -1 D
6 -1 D
10 2 D
5 3 D
5 4 D
5 5 D
5 6 D
6 7 D
10 18 D
5 10 D
10 24 D
5 14 D
6 15 D
5 16 D
5 17 D
5 18 D
5 19 D
5 20 D
5 21 D
6 23 D
5 23 D
10 50 D
5 27 D
10 56 D
6 30 D
5 32 D
5 31 D
 S
%
% Start of basemap
%
S [] 0 B
%
% Map boundaries
%
%
% Start of left y-axis
%
90 R
/PSL_sign 1 def
/PSL_TL1 22 def
/PSL_AO0 22 def
/PSL_AO1 0 def
/PSL_LO 34 def
/PSL_HO 56 def
/PSL_AH0 0 def
/PSL_AH1 0 def
/PSL_AF0 58 def
/PSL_AF1 67 def
/PSL_LF 100 def
%
% Axis tick marks
%
S 5 W
S [] 0 B
0 0 M 540 0 D S
S 2 W
S [] 0 B
49 0 M 0 22 D S
147 0 M 0 22 D S
245 0 M 0 22 D S
344 0 M 0 22 D S
442 0 M 0 22 D S
540 0 M 0 22 D S
0 0 M 58 F0 (0) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimx PSL_AH0 gt {/PSL_AH0 PSL_dimx def} if
0 0 M 58 F0 (20) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimx PSL_AH0 gt {/PSL_AH0 PSL_dimx def} if
0 0 M 58 F0 (40) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimx PSL_AH0 gt {/PSL_AH0 PSL_dimx def} if
0 0 M 58 F0 (60) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimx PSL_AH0 gt {/PSL_AH0 PSL_dimx def} if
0 0 M 58 F0 (80) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimx PSL_AH0 gt {/PSL_AH0 PSL_dimx def} if
0 0 M 58 F0 (100) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimx PSL_AH0 gt {/PSL_AH0 PSL_dimx def} if
0 0 M 0 11 D S
25 0 M 0 11 D S
49 0 M 0 11 D S
74 0 M 0 11 D S
98 0 M 0 11 D S
123 0 M 0 11 D S
147 0 M 0 11 D S
172 0 M 0 11 D S
196 0 M 0 11 D S
221 0 M 0 11 D S
245 0 M 0 11 D S
270 0 M 0 11 D S
295 0 M 0 11 D S
319 0 M 0 11 D S
344 0 M 0 11 D S
368 0 M 0 11 D S
393 0 M 0 11 D S
417 0 M 0 11 D S
442 0 M 0 11 D S
466 0 M 0 11 D S
491 0 M 0 11 D S
515 0 M 0 11 D S
540 0 M 0 11 D S
/PSL_LH 0 def
/PSL_A0_y PSL_AO0 PSL_TL1 PSL_AO0 mul 0 gt {PSL_TL1 add} if PSL_AO0 0 gt {PSL_sign 0 lt {PSL_AH0} {0} ifelse add} if PSL_sign mul def
/PSL_A1_y PSL_A0_y abs PSL_AO1 add PSL_sign 0 lt {PSL_AH1} {PSL_AH0} ifelse add PSL_sign mul def
/PSL_L_y PSL_A1_y abs PSL_LO add PSL_sign 0 lt {PSL_LH} {PSL_AH1} ifelse add PSL_sign mul def
/PSL_x 49 def
0 0 M 58 F0 (0) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
/PSL_y_off PSL_dimy 0.5 mul neg def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (0) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
V -90 R 0 PSL_dimx -1.0 mul PSL_dimy -0.5 mul G 58 F0 (0) Z U
/PSL_x 147 def
0 0 M 58 F0 (20) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
/PSL_y_off PSL_dimy 0.5 mul neg def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (20) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
V -90 R 0 PSL_dimx -1.0 mul PSL_dimy -0.5 mul G 58 F0 (20) Z U
/PSL_x 245 def
0 0 M 58 F0 (40) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
/PSL_y_off PSL_dimy 0.5 mul neg def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (40) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
V -90 R 0 PSL_dimx -1.0 mul PSL_dimy -0.5 mul G 58 F0 (40) Z U
/PSL_x 344 def
0 0 M 58 F0 (60) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
/PSL_y_off PSL_dimy 0.5 mul neg def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (60) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
V -90 R 0 PSL_dimx -1.0 mul PSL_dimy -0.5 mul G 58 F0 (60) Z U
/PSL_x 442 def
0 0 M 58 F0 (80) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
/PSL_y_off PSL_dimy 0.5 mul neg def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (80) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
V -90 R 0 PSL_dimx -1.0 mul PSL_dimy -0.5 mul G 58 F0 (80) Z U
/PSL_x 540 def
0 0 M 58 F0 (100) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
/PSL_y_off PSL_dimy 0.5 mul neg def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (100) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
V -90 R 0 PSL_dimx -1.0 mul PSL_dimy -0.5 mul G 58 F0 (100) Z U
-90 R
%
% End of left y-axis
%
%
% Start of right y-axis
%
900 0 T 90 R
/PSL_sign -1 def
/PSL_TL1 22 def
/PSL_AO0 22 def
/PSL_AO1 0 def
/PSL_LO 34 def
/PSL_HO 56 def
/PSL_AH0 0 def
/PSL_AH1 0 def
/PSL_AF0 58 def
/PSL_AF1 67 def
/PSL_LF 100 def
%
% Axis tick marks
%
S 5 W
S [] 0 B
0 0 M 540 0 D S
S 2 W
S [] 0 B
49 0 M 0 -22 D S
147 0 M 0 -22 D S
245 0 M 0 -22 D S
344 0 M 0 -22 D S
442 0 M 0 -22 D S
540 0 M 0 -22 D S
0 0 M 0 -11 D S
25 0 M 0 -11 D S
49 0 M 0 -11 D S
74 0 M 0 -11 D S
98 0 M 0 -11 D S
123 0 M 0 -11 D S
147 0 M 0 -11 D S
172 0 M 0 -11 D S
196 0 M 0 -11 D S
221 0 M 0 -11 D S
245 0 M 0 -11 D S
270 0 M 0 -11 D S
295 0 M 0 -11 D S
319 0 M 0 -11 D S
344 0 M 0 -11 D S
368 0 M 0 -11 D S
393 0 M 0 -11 D S
417 0 M 0 -11 D S
442 0 M 0 -11 D S
466 0 M 0 -11 D S
491 0 M 0 -11 D S
515 0 M 0 -11 D S
540 0 M 0 -11 D S
/PSL_LH 0 def
/PSL_A0_y PSL_AO0 PSL_TL1 PSL_AO0 mul 0 gt {PSL_TL1 add} if PSL_AO0 0 gt {PSL_sign 0 lt {PSL_AH0} {0} ifelse add} if PSL_sign mul def
/PSL_A1_y PSL_A0_y abs PSL_AO1 add PSL_sign 0 lt {PSL_AH1} {PSL_AH0} ifelse add PSL_sign mul def
/PSL_L_y PSL_A1_y abs PSL_LO add PSL_sign 0 lt {PSL_LH} {PSL_AH1} ifelse add PSL_sign mul def
-90 R -900 0 T
%
% End of right y-axis
%
%
% Start of lower x-axis
%

/PSL_sign -1 def
/PSL_TL1 22 def
/PSL_AO0 22 def
/PSL_AO1 0 def
/PSL_LO 34 def
/PSL_HO 56 def
/PSL_AH0 0 def
/PSL_AH1 0 def
/PSL_AF0 58 def
/PSL_AF1 67 def
/PSL_LF 100 def
%
% Axis tick marks
%
S 5 W
S [] 0 B
0 0 M 900 0 D S
S 2 W
S [] 0 B
0 0 M 0 -22 D S
0 0 M 58 F0 (0) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_dimy PSL_AH0 gt {/PSL_AH0 PSL_dimy def} if
0 0 M 0 -11 D S
129 0 M 0 -11 D S
257 0 M 0 -11 D S
386 0 M 0 -11 D S
514 0 M 0 -11 D S
643 0 M 0 -11 D S
771 0 M 0 -11 D S
900 0 M 0 -11 D S
/PSL_LH 0 def
/PSL_A0_y PSL_AO0 PSL_TL1 PSL_AO0 mul 0 gt {PSL_TL1 add} if PSL_AO0 0 gt {PSL_sign 0 lt {PSL_AH0} {0} ifelse add} if PSL_sign mul def
/PSL_A1_y PSL_A0_y abs PSL_AO1 add PSL_sign 0 lt {PSL_AH1} {PSL_AH0} ifelse add PSL_sign mul def
/PSL_L_y PSL_A1_y abs PSL_LO add PSL_sign 0 lt {PSL_LH} {PSL_AH1} ifelse add PSL_sign mul def
/PSL_x 0 def
0 0 M 58 F0 (0) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_x PSL_A0_y M
currentpoint /PSL_save_y exch def /PSL_save_x exch def
0 0 M 58 F0 (0) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
PSL_save_x PSL_save_y m
0 PSL_dimx -0.5 mul 0 G 58 F0 (0) Z

%
% End of lower x-axis
%
%
% Start of upper x-axis
%
0 540 T
/PSL_sign 1 def
/PSL_TL1 22 def
/PSL_AO0 22 def
/PSL_AO1 0 def
/PSL_LO 34 def
/PSL_HO 56 def
/PSL_AH0 0 def
/PSL_AH1 0 def
/PSL_AF0 58 def
/PSL_AF1 67 def
/PSL_LF 100 def
%
% Axis tick marks
%
S 5 W
S [] 0 B
0 0 M 900 0 D S
S 2 W
S [] 0 B
0 0 M 0 22 D S
0 0 M 0 11 D S
129 0 M 0 11 D S
257 0 M 0 11 D S
386 0 M 0 11 D S
514 0 M 0 11 D S
643 0 M 0 11 D S
771 0 M 0 11 D S
900 0 M 0 11 D S
/PSL_LH 0 def
/PSL_A0_y PSL_AO0 PSL_TL1 PSL_AO0 mul 0 gt {PSL_TL1 add} if PSL_AO0 0 gt {PSL_sign 0 lt {PSL_AH0} {0} ifelse add} if PSL_sign mul def
/PSL_A1_y PSL_A0_y abs PSL_AO1 add PSL_sign 0 lt {PSL_AH1} {PSL_AH0} ifelse add PSL_sign mul def
/PSL_L_y PSL_A1_y abs PSL_LO add PSL_sign 0 lt {PSL_LH} {PSL_AH1} ifelse add PSL_sign mul def
/PSL_H_y PSL_L_y PSL_LH add PSL_HO add def
0 -540 T
%
% End of upper x-axis
%
S [] 0 B
%
% End of basemap
%
S [] 0 B
S 0 A
PSL_font_encode 0 get 0 eq { % Set this font
	Standard+_Encoding /Helvetica /Helvetica PSL_reencode
	PSL_font_encode 0 1 put
} if
%
% PostScript produced by:
%
%%GMT:  psmeca -JX3/1.8 -R0/35/-10/100 -O -K -Sa0.3 

S 1 W
S [] 0 B
S 0 A
%
% Activate Map clip path
%

% Start of clip path
S V
0 0 M
900 0 D
0 540 D
-900 0 D
P
eoclip N
% End of clip path.  Clipping is currently ON
S [] 0 B
303 360 M
N 1 257 360 46 C1
215 379 M
3 0 D
3 -1 D
2 0 D
3 -1 D
2 0 D
3 -1 D
2 -1 D
1 0 D
4 -2 D
1 0 D
1 -1 D
3 0 D
1 -1 D
1 0 D
1 -1 D
2 0 D
0 -1 D
2 0 D
0 -1 D
2 0 D
1 -1 D
2 0 D
0 -1 D
2 0 D
0 -1 D
2 0 D
0 -1 D
1 0 D
0 1 D
1 1 D
1 2 D
1 4 D
4 8 D
8 17 D
2 5 D
-2 0 D
0 1 D
-2 0 D
-1 1 D
-2 0 D
-1 1 D
-4 0 D
0 1 D
-16 0 D
-1 -1 D
-3 0 D
-1 -1 D
-2 0 D
-1 -1 D
-2 0 D
-1 -1 D
-1 0 D
-1 -1 D
-1 0 D
0 -1 D
-2 0 D
0 -1 D
-1 0 D
-2 -2 D
-1 0 D
0 -1 D
-1 0 D
-3 -3 D
-1 0 D
0 -1 D
-1 0 D
0 -1 D
-2 -2 D
0 -1 D
-1 0 D
0 -1 D
-1 0 D
0 -1 D
-2 -2 D
0 -2 D
-1 0 D
0 -2 D
-1 0 D
0 a
299 340 M
-4 4 D
-2 1 D
-2 2 D
-3 1 D
-1 2 D
-6 3 D
-1 1 D
-1 0 D
-2 2 D
-1 0 D
-1 1 D
-1 0 D
-1 1 D
-1 0 D
-1 1 D
-1 0 D
-1 1 D
-1 0 D
-1 1 D
-1 0 D
-1 1 D
-1 0 D
-1 1 D
-2 0 D
0 1 D
-1 0 D
-1 -1 D
0 -2 D
-1 0 D
0 -2 D
-1 0 D
0 -2 D
-1 0 D
0 -2 D
-1 0 D
0 -1 D
-2 -4 D
-2 -5 D
-6 -11 D
-8 -16 D
1 0 D
1 -1 D
1 0 D
1 -1 D
2 0 D
1 -1 D
3 0 D
1 -1 D
7 0 D
1 -1 D
2 0 D
1 1 D
8 0 D
0 1 D
4 0 D
0 1 D
2 0 D
1 1 D
2 0 D
1 1 D
1 0 D
1 1 D
1 0 D
0 1 D
2 0 D
0 1 D
1 0 D
2 2 D
1 0 D
0 1 D
1 0 D
0 1 D
1 0 D
2 2 D
0 1 D
1 0 D
2 2 D
0 1 D
1 0 D
0 1 D
1 0 D
0 2 D
1 0 D
0 1 D
1 1 D
0 1 D
1 0 D
0 2 D
1 0 D
0 1 D
0 a
S [] 0 B
0 0 M 38 F0 (5.15) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
257 418 M 0 PSL_dimx -0.5 mul 0 G 38 F0 (5.15) Z
257 418 M
S [] 0 B
432 50 M
N 1 386 50 47 C1
428 30 M
-43 20 D
-1 0 D
0 -2 D
-1 -1 D
0 -1 D
-1 -1 D
0 -1 D
-1 -1 D
0 -1 D
-1 -2 D
-1 -1 D
-2 -6 D
-3 -6 D
-4 -9 D
-4 -11 D
1 0 D
1 -1 D
2 0 D
1 -1 D
2 0 D
1 -1 D
4 0 D
0 -1 D
15 0 D
1 1 D
4 0 D
1 1 D
2 0 D
1 1 D
1 0 D
1 1 D
1 0 D
1 1 D
2 0 D
0 1 D
1 0 D
1 1 D
1 0 D
1 1 D
1 0 D
0 1 D
1 0 D
0 1 D
1 0 D
2 2 D
1 0 D
0 1 D
3 3 D
0 1 D
1 0 D
2 2 D
0 1 D
1 1 D
0 1 D
2 2 D
0 1 D
1 1 D
0 1 D
0 a
343 69 M
42 -19 D
0 2 D
1 0 D
0 2 D
1 0 D
0 2 D
2 2 D
0 2 D
1 1 D
1 3 D
2 3 D
7 14 D
5 11 D
-1 1 D
-2 0 D
-1 1 D
-2 0 D
-1 1 D
-3 0 D
-1 1 D
-16 0 D
-1 -1 D
-3 0 D
-1 -1 D
-2 0 D
-1 -1 D
-3 0 D
0 -1 D
-2 0 D
0 -1 D
-1 0 D
-1 -1 D
-1 0 D
-1 -1 D
-1 0 D
0 -1 D
-1 0 D
-2 -2 D
-1 0 D
0 -1 D
-1 0 D
-3 -3 D
0 -1 D
-1 0 D
-2 -2 D
0 -1 D
-1 0 D
0 -1 D
-1 -1 D
0 -1 D
-2 -2 D
0 -1 D
-1 0 D
0 -2 D
-1 -1 D
0 a
S [] 0 B
0 0 M 38 F0 (5.19) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
386 108 M 0 PSL_dimx -0.5 mul 0 G 38 F0 (5.19) Z
386 108 M
S [] 0 B
561 419 M
N 1 514 419 47 C1
557 400 M
-43 19 D
0 -1 D
-1 0 D
0 -2 D
-1 0 D
0 -2 D
-2 -2 D
-1 -3 D
-1 -4 D
-4 -9 D
-9 -20 D
1 0 D
1 -1 D
2 0 D
1 -1 D
2 0 D
1 -1 D
4 0 D
1 -1 D
13 0 D
1 1 D
4 0 D
0 1 D
3 0 D
0 1 D
3 0 D
1 1 D
1 0 D
2 2 D
2 0 D
0 1 D
1 0 D
1 1 D
1 0 D
2 2 D
1 0 D
0 1 D
1 0 D
1 1 D
0 1 D
1 0 D
0 1 D
1 0 D
0 1 D
1 0 D
1 1 D
0 1 D
1 0 D
0 1 D
2 2 D
0 1 D
1 1 D
0 1 D
1 0 D
0 1 D
1 1 D
0 1 D
1 1 D
0 1 D
0 a
472 438 M
42 -19 D
0 2 D
1 0 D
0 2 D
1 0 D
0 2 D
1 1 D
1 3 D
2 4 D
4 9 D
9 19 D
0 1 D
-2 0 D
-1 1 D
-2 0 D
-1 1 D
-3 0 D
-1 1 D
-18 0 D
0 -1 D
-4 0 D
0 -1 D
-3 0 D
0 -1 D
-2 0 D
-1 -1 D
-1 0 D
-1 -1 D
-1 0 D
-1 -1 D
-1 0 D
0 -1 D
-1 0 D
-1 -1 D
-1 0 D
-2 -2 D
-1 0 D
0 -1 D
-1 -1 D
-1 0 D
0 -1 D
-1 0 D
0 -1 D
-1 0 D
0 -1 D
-2 -2 D
-1 0 D
0 -1 D
-1 -1 D
0 -1 D
-1 -1 D
0 -1 D
-1 0 D
0 -1 D
-1 -1 D
0 -1 D
-1 -1 D
0 -1 D
0 a
S [] 0 B
0 0 M 38 F0 (5.19) true charpath flattenpath pathbbox N exch 2 {3 1 roll sub abs} repeat /PSL_dimx exch def /PSL_dimy exch def
514 477 M 0 PSL_dimx -0.5 mul 0 G 38 F0 (5.19) Z
514 477 M
%
% Deactivate Map clip path
%

S U
%Clipping is currently OFF
S [] 0 B
S [] 0 B
S 0 A
PSL_font_encode 0 get 0 eq { % Set this font
	Standard+_Encoding /Helvetica /Helvetica PSL_reencode
	PSL_font_encode 0 1 put
} if
%
% PostScript produced by:
%
%%GMT:  pstext -JX3/1.8 -R0/35/-10/100 -O 

S 1 W
S [] 0 B
S 0 A
%
% Activate Map clip path
%

% Start of clip path
S V
0 0 M
900 0 D
0 540 D
-900 0 D
P
eoclip N
% End of clip path.  Clipping is currently ON
51 501 M 42 F0 (20080418093700 h=14.8  0.6) Z
%
% Deactivate Map clip path
%

S U
%Clipping is currently OFF
S [] 0 B
%%Trailer
%%BoundingBox: 0 0 293 207
% Reset translations and scale and call showpage
S -0 -0 T 4.16667 4.16667 scale 0 A
showpage

end
