README_dc_short

-------------------------------------------------------------------
UAF TIPS

+ Ensure you are in the sln01 conda environment - if needed, type [source activate sln01]
  This is needed for pysep to get data.

+ Run the default example in README_dc_short (below). Type [more README_dc_short] to view the instructions. I recommend having a different terminal open for reading it.

+ After having run the example, keep the README open and learn what all the flags do - type [cap.pl] to read the user instructions. See also CAP_default_example in the UAF GROUP Google Drive. See also https://scholarworks.alaska.edu/handle/11122/10984 for detailed explanation of what all the numbers in the header and under each waveform are (you will need this for the waveform selection criteria later)

+ Repeat pysep steps for your new earthquake (you do not need to run check_getwaveform.bash again - that was for the specific example) by modifying event_input.py in the $PYSEP directory. 

+ Run cap for new earthquake. Make sure you know what all the flags do in the example and change them accordingly for your new earthquake

+ Things specifically to watch out for: depth, magnitude, Greenâ€™s function (navigate to /store/waveform/FK_synthetics to see what 1D models are premade; typically use tactmod for the interior and scak for southern Alaska), filters, weight file. Get into the ballpark solution by fixing depth + magnitude to what is listed in the AEC catalog

+ Once you are sure that you have changed all the flags you need to, perform the waveform selection criteria as per the capuaf_manual Appendix B - go to capuaf/doc and type [compile]. Open the resulting pdf.

+ Pay close attention to Figure 1 of Appendix B - use this to help figure out what to set the -L flag to.

-------------------------------------------------------------------
DATA EXTRACTION and SETUP

These instructions assume that the user is on the UAF seismo linux network, which has environmental variables $PYSEP, $CAPHOME, etc.

0. compile CAP in parallel mode
> cd $CAPHOME
> make clean
> make cap f=omp >& make.log

note: see GIseis.pdf doc for number of cores on each machine
note: you may need the compilation flag -no-pie (see Makefile)

1. Extract waveforms from IRIS and check that you have received all the data:
> cd $PYSEP
> python run_getwaveform.py event_input
> check_getwaveform.bash

note: You must be within the sln environment (source activate sln)
note: This will create the data directory 20090407201255351 inside $PYSEP
note: set imin=0 and imax=0 in check_getwaveform.bash if this is not done already
note: run_getwaveform.py reads the file event_input.py, NOT the directory event_input

2. prepare for running cap

> cd $CAPHOME
> rsync -av $PYSEP/20090407201255351 .

3. Copy input weight file into the data directory:
Only the 'clean' stations are selected in this weight file

> cp $CAPHOME/EXAMPLES/20090407201255351_dc_short/weight_dc_short.dat ./20090407201255351

4. run cap

> cap.pl -K1 -H0.02 -P1/15/60 -p1 -S2/10/0 -T15/120 -D1/1/0.5 -C0.25/0.6667/0.025/0.0625 -Y1 -Zweight_dc_short.dat -Mscak_39 -m4.2/4.7/0.1 -A30/50/3 -I50000 -R0/0 20090407201255351

OR use a parameter file

> cp $CAPHOME/EXAMPLES/20090407201255351_dc_short/flags_depth_dc_short.pf .
> cap.pl flags_depth_dc_short.pf

OR use an input command
> cp $CAPHOME/EXAMPLES/20090407201255351_dc_short/inp_cmd_dc_short .
> inp_cmd_dc_short

-------------------------------------------------------------------

6. generate a figure showing the results (VR vs depth)

> depth_test 20090407201255351
> ev OUTPUT_DIR/20090407201255351__dep.ps &

7. compare your files ($CAPHOME/OUTPUT_DIR) with the example files ($CAPHOME/EXAMPLES/20090407201255351_dc_short)

-------------------------------------------------------------------

To run the extended DC example, try 20090407201255351_dc
To run the FMT example, try 20090407201255351_fmt

-------------------------------------------------------------------
